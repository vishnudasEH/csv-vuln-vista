import { useVulnerabilities } from '@/hooks/useVulnerabilities';
import VulnerabilityFilters from '@/components/filters/VulnerabilityFilters';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { AlertTriangle, Shield, Clock, Users, FileText, ExternalLink } from 'lucide-react';
import { VulnerabilityFindingsDialog } from '@/components/ui/vulnerability-findings-dialog';
import { Vulnerability, VulnerabilitySeverity } from '@/types/vulnerability';
import SeverityBadge from '@/components/ui/severity-badge';

const VulnerabilityBasedView = () => {
  const {
    filteredVulnerabilities,
    filters,
    setFilters,
    loading,
    error,
    updateVulnerabilities,
  } = useVulnerabilities();

  // Group vulnerabilities by unique names and get stats
  const uniqueVulnerabilities = filteredVulnerabilities.reduce((acc, vuln) => {
    if (!acc[vuln.name]) {
      acc[vuln.name] = {
        name: vuln.name,
        description: vuln.description,
        findings: [],
        totalCount: 0,
        criticalCount: 0,
        highCount: 0,
        mediumCount: 0,
        lowCount: 0,
        openCount: 0,
        maxSeverity: vuln.severity,
      };
    }
    
    acc[vuln.name].findings.push(vuln);
    acc[vuln.name].totalCount++;
    
    // Count by severity (handle both cases)
    const severity = vuln.severity.toLowerCase();
    if (severity === 'critical') acc[vuln.name].criticalCount++;
    else if (severity === 'high') acc[vuln.name].highCount++;
    else if (severity === 'medium') acc[vuln.name].mediumCount++;
    else if (severity === 'low') acc[vuln.name].lowCount++;
    
    // Count open items (handle both cases)
    const status = vuln.status.toLowerCase();
    if (status === 'open') acc[vuln.name].openCount++;
    
    // Track highest severity (handle both cases)
    const severityOrder = { 'critical': 5, 'high': 4, 'medium': 3, 'low': 2, 'info': 1 };
    const currentSeverity = vuln.severity.toLowerCase();
    const maxSeverity = acc[vuln.name].maxSeverity.toLowerCase();
    if (severityOrder[currentSeverity] > severityOrder[maxSeverity]) {
      acc[vuln.name].maxSeverity = vuln.severity;
    }
    
    return acc;
  }, {} as Record<string, {
    name: string;
    description: string;
    findings: Vulnerability[];
    totalCount: number;
    criticalCount: number;
    highCount: number;
    mediumCount: number;
    lowCount: number;
    openCount: number;
    maxSeverity: VulnerabilitySeverity;
  }>);

  const uniqueVulnArray = Object.values(uniqueVulnerabilities).sort((a, b) => {
    // Sort by severity first, then by total count
    const severityOrder = { 'critical': 5, 'high': 4, 'medium': 3, 'low': 2, 'info': 1 };
    const aSeverity = a.maxSeverity.toLowerCase();
    const bSeverity = b.maxSeverity.toLowerCase();
    const severityDiff = severityOrder[bSeverity] - severityOrder[aSeverity];
    return severityDiff !== 0 ? severityDiff : b.totalCount - a.totalCount;
  });

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          {[...Array(4)].map((_, i) => (
            <Card key={i} className="animate-pulse">
              <CardContent className="p-6">
                <div className="h-4 bg-muted rounded w-3/4 mb-2"></div>
                <div className="h-8 bg-muted rounded w-1/2"></div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-12">
        <AlertTriangle className="h-12 w-12 text-destructive mx-auto mb-4" />
        <h2 className="text-xl font-semibold mb-2">Error Loading Data</h2>
        <p className="text-muted-foreground">{error}</p>
      </div>
    );
  }

  const stats = {
    uniqueVulns: uniqueVulnArray.length,
    totalFindings: filteredVulnerabilities.length,
    critical: filteredVulnerabilities.filter(v => v.severity.toLowerCase() === 'critical').length,
    high: filteredVulnerabilities.filter(v => v.severity.toLowerCase() === 'high').length,
    open: filteredVulnerabilities.filter(v => v.status.toLowerCase() === 'open').length,
  };

  return (
    <div className="space-y-6">
      {/* Page Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold">Unique Vulnerabilities</h1>
          <p className="text-muted-foreground">
            Deduplicated vulnerability titles with associated findings
          </p>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Unique Vulnerabilities</CardTitle>
            <FileText className="h-4 w-4 text-primary" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.uniqueVulns}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Findings</CardTitle>
            <Shield className="h-4 w-4 text-primary" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{stats.totalFindings}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Critical</CardTitle>
            <AlertTriangle className="h-4 w-4 text-severity-critical" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-severity-critical">{stats.critical}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">High</CardTitle>
            <AlertTriangle className="h-4 w-4 text-severity-high" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-severity-high">{stats.high}</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Open Status</CardTitle>
            <Clock className="h-4 w-4 text-status-open" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-status-open">{stats.open}</div>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <VulnerabilityFilters
        filters={filters}
        onFiltersChange={setFilters}
        vulnerabilities={filteredVulnerabilities}
        filteredVulnerabilities={filteredVulnerabilities}
      />

      {/* Unique Vulnerabilities List */}
      <Card>
        <CardHeader>
          <CardTitle>Unique Vulnerability Types</CardTitle>
        </CardHeader>
        <CardContent className="p-0">
          <div className="divide-y">
            {uniqueVulnArray.map((vulnGroup) => (
              <div key={vulnGroup.name} className="p-4 hover:bg-muted/50 transition-colors">
                <div className="flex items-center justify-between">
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-3 mb-2">
                      <SeverityBadge severity={vulnGroup.maxSeverity} />
                      <h3 className="font-medium text-lg truncate">{vulnGroup.name}</h3>
                    </div>
                    {vulnGroup.description && (
                      <p className="text-sm text-muted-foreground mb-3 line-clamp-2">
                        {vulnGroup.description}
                      </p>
                    )}
                    <div className="flex items-center gap-4 text-sm text-muted-foreground">
                      <span>{vulnGroup.totalCount} findings</span>
                      {vulnGroup.criticalCount > 0 && (
                        <span className="text-severity-critical">
                          {vulnGroup.criticalCount} critical
                        </span>
                      )}
                      {vulnGroup.highCount > 0 && (
                        <span className="text-severity-high">
                          {vulnGroup.highCount} high
                        </span>
                      )}
                      {vulnGroup.openCount > 0 && (
                        <span className="text-status-open">
                          {vulnGroup.openCount} open
                        </span>
                      )}
                    </div>
                  </div>
                  <div className="flex items-center gap-2 ml-4">
                    <VulnerabilityFindingsDialog
                      vulnerabilityName={vulnGroup.name}
                      findings={vulnGroup.findings}
                      onUpdate={updateVulnerabilities}
                    >
                      <Button variant="outline" size="sm" className="gap-2">
                        <ExternalLink className="h-4 w-4" />
                        View {vulnGroup.totalCount} Finding{vulnGroup.totalCount !== 1 ? 's' : ''}
                      </Button>
                    </VulnerabilityFindingsDialog>
                  </div>
                </div>
              </div>
            ))}
          </div>
          {uniqueVulnArray.length === 0 && (
            <div className="text-center py-8 text-muted-foreground">
              No vulnerabilities match the current filters.
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};

export default VulnerabilityBasedView;
