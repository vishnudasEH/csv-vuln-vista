import { useState } from 'react';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { User, Calendar, Clock, Edit2 } from 'lucide-react';
import { Vulnerability, VulnerabilityStatus } from '@/types/vulnerability';
import SeverityBadge from '@/components/ui/severity-badge';
import StatusBadge from '@/components/ui/status-badge';
import { format, parseISO } from 'date-fns';
import { useToast } from '@/hooks/use-toast';

interface VulnerabilityPreviewDialogProps {
  vulnerability: Vulnerability;
  availableAssignees: string[];
  onUpdate?: (updates: Array<{name: string, host: string} & Partial<Vulnerability>>) => Promise<void>;
  children: React.ReactNode;
}

export const VulnerabilityPreviewDialog = ({
  vulnerability,
  availableAssignees,
  onUpdate,
  children
}: VulnerabilityPreviewDialogProps) => {
  const { toast } = useToast();
  const [isOpen, setIsOpen] = useState(false);
  const [editingStatus, setEditingStatus] = useState(vulnerability.status);
  const [editingAssignee, setEditingAssignee] = useState(vulnerability.assigned_to || 'unassigned');

  const formatDate = (dateString: string) => {
    try {
      return format(parseISO(dateString), 'MMM dd, yyyy HH:mm');
    } catch {
      return dateString;
    }
  };

  const handleSave = async () => {
    if (onUpdate) {
      const updates: Partial<Vulnerability> = {};
      if (editingStatus !== vulnerability.status) {
        updates.status = editingStatus;
      }
      if (editingAssignee !== (vulnerability.assigned_to || 'unassigned')) {
        updates.assigned_to = editingAssignee === 'unassigned' ? '' : editingAssignee;
      }

      if (Object.keys(updates).length > 0) {
        try {
          await onUpdate([{ name: vulnerability.name, host: vulnerability.host, ...updates }]);
          toast({
            title: "Success",
            description: "Changes saved to master Excel file.",
          });
          setIsOpen(false);
        } catch (error) {
          toast({
            title: "Update Failed",
            description: "Failed to update vulnerability. Please try again.",
            variant: "destructive",
          });
        }
      } else {
        setIsOpen(false);
      }
    }
  };

  const handleCancel = () => {
    setEditingStatus(vulnerability.status);
    setEditingAssignee(vulnerability.assigned_to || 'unassigned');
    setIsOpen(false);
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        {children}
      </DialogTrigger>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Edit2 className="h-5 w-5" />
            Vulnerability Details
          </DialogTitle>
          <DialogDescription>
            View and edit vulnerability information
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-6">
          {/* Basic Info */}
          <div className="space-y-4">
            <div>
              <h3 className="font-semibold text-lg">{vulnerability.name}</h3>
              {vulnerability.description && (
                <p className="text-sm text-muted-foreground mt-1">
                  {vulnerability.description}
                </p>
              )}
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium text-muted-foreground">Host</label>
                <p className="font-mono text-sm mt-1">{vulnerability.host}</p>
              </div>
              <div>
                <label className="text-sm font-medium text-muted-foreground">Port</label>
                <p className="font-mono text-sm mt-1">{vulnerability.port}</p>
              </div>
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium text-muted-foreground">Severity</label>
                <div className="mt-1">
                  <SeverityBadge severity={vulnerability.severity} />
                </div>
              </div>
              <div>
                <label className="text-sm font-medium text-muted-foreground">Days Overdue</label>
                <div className="mt-1">
                  {vulnerability.days_overdue > 0 ? (
                    <Badge variant="destructive">{vulnerability.days_overdue} days</Badge>
                  ) : (
                    <span className="text-sm text-muted-foreground">-</span>
                  )}
                </div>
              </div>
            </div>

            <div>
              <label className="text-sm font-medium text-muted-foreground flex items-center gap-1">
                <Calendar className="h-4 w-4" />
                Timestamp
              </label>
              <p className="text-sm mt-1">{formatDate(vulnerability.timestamp)}</p>
            </div>
          </div>

          {/* Editable Fields */}
          <div className="space-y-4 border-t pt-4">
            <h4 className="font-medium">Edit Details</h4>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium">Status</label>
                <Select value={editingStatus} onValueChange={(value) => setEditingStatus(value as VulnerabilityStatus)}>
                  <SelectTrigger className="mt-1">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="Open">Open</SelectItem>
                    <SelectItem value="Fixed">Fixed</SelectItem>
                    <SelectItem value="Triaged">Triaged</SelectItem>
                    <SelectItem value="False Positive">False Positive</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div>
                <label className="text-sm font-medium flex items-center gap-1">
                  <User className="h-4 w-4" />
                  Assignee
                </label>
                <Select value={editingAssignee} onValueChange={setEditingAssignee}>
                  <SelectTrigger className="mt-1">
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="unassigned">Unassigned</SelectItem>
                    {availableAssignees.map((assignee) => (
                      <SelectItem key={assignee} value={assignee}>
                        {assignee}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
            </div>
          </div>

          {/* Current Status Display */}
          <div className="flex items-center justify-between text-sm bg-muted/50 p-3 rounded-lg">
            <span className="text-muted-foreground">Current Status:</span>
            <div className="flex items-center gap-2">
              <StatusBadge status={vulnerability.status} />
              {vulnerability.assigned_to ? (
                <Badge variant="secondary">{vulnerability.assigned_to}</Badge>
              ) : (
                <span className="text-muted-foreground">Unassigned</span>
              )}
            </div>
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={handleCancel}>
            Cancel
          </Button>
          <Button onClick={handleSave}>
            Save Changes
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};