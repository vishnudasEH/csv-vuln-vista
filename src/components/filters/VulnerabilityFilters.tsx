import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Search, Filter, X, Calendar as CalendarIcon, Download } from 'lucide-react';
import { format } from 'date-fns';
import { FilterOptions, Vulnerability, VulnerabilitySeverity, VulnerabilityStatus } from '@/types/vulnerability';
import { CSVService } from '@/services/csvService';
import { cn } from '@/lib/utils';

interface VulnerabilityFiltersProps {
  vulnerabilities: Vulnerability[];
  filteredVulnerabilities: Vulnerability[];
  filters: FilterOptions;
  onFiltersChange: (filters: FilterOptions) => void;
}

const VulnerabilityFilters = ({
  vulnerabilities,
  filteredVulnerabilities,
  filters,
  onFiltersChange,
}: VulnerabilityFiltersProps) => {
  const [showAdvancedFilters, setShowAdvancedFilters] = useState(false);

  const severityOptions: VulnerabilitySeverity[] = ['Critical', 'High', 'Medium', 'Low', 'Info'];
  const statusOptions: VulnerabilityStatus[] = ['Open', 'In Progress', 'Resolved', 'Closed'];

  const uniqueHosts = Array.from(new Set(vulnerabilities.map(v => v.host))).sort();
  const uniqueAssignees = Array.from(new Set(vulnerabilities.map(v => v.assigned_to).filter(Boolean))).sort();

  const updateFilters = (updates: Partial<FilterOptions>) => {
    onFiltersChange({ ...filters, ...updates });
  };

  const toggleArrayFilter = <T,>(array: T[], item: T): T[] => {
    return array.includes(item) ? array.filter(i => i !== item) : [...array, item];
  };

  const clearFilters = () => {
    onFiltersChange({
      severity: [],
      status: [],
      assigned_to: [],
      host: [],
      dateRange: {},
      searchTerm: '',
    });
  };

  const handleExport = (exportFormat: 'csv' | 'excel') => {
    const timestamp = format(new Date(), 'yyyy-MM-dd_HH-mm-ss');
    const filename = `vulnerabilities_${timestamp}`;
    
    if (exportFormat === 'csv') {
      CSVService.exportToCsv(filteredVulnerabilities, `${filename}.csv`);
    } else {
      CSVService.exportToExcel(filteredVulnerabilities, `${filename}.xlsx`);
    }
  };

  return (
    <Card className="mb-6">
      <CardHeader className="pb-4">
        <div className="flex items-center justify-between">
          <CardTitle className="flex items-center">
            <Filter className="h-5 w-5 mr-2" />
            Filters & Search
          </CardTitle>
          <div className="flex items-center space-x-2">
            <Badge variant="secondary">
              {filteredVulnerabilities.length} of {vulnerabilities.length} findings
            </Badge>
            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline" size="sm">
                  <Download className="h-4 w-4 mr-2" />
                  Export
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-48">
                <div className="space-y-2">
                  <Button
                    variant="ghost"
                    size="sm"
                    className="w-full justify-start"
                    onClick={() => handleExport('csv')}
                  >
                    Export as CSV
                  </Button>
                  <Button
                    variant="ghost"
                    size="sm"
                    className="w-full justify-start"
                    onClick={() => handleExport('excel')}
                  >
                    Export as Excel
                  </Button>
                </div>
              </PopoverContent>
            </Popover>
          </div>
        </div>
      </CardHeader>
      <CardContent className="space-y-4">
        {/* Search */}
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search across all fields..."
            value={filters.searchTerm}
            onChange={(e) => updateFilters({ searchTerm: e.target.value })}
            className="pl-10"
          />
        </div>

        {/* Quick Filters */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {/* Severity Filter */}
          <div>
            <Label className="text-sm font-medium mb-2 block">Severity</Label>
            <div className="flex flex-wrap gap-1">
              {severityOptions.map((severity) => (
                <Badge
                  key={severity}
                  variant={filters.severity.includes(severity) ? "default" : "outline"}
                  className={cn(
                    "cursor-pointer transition-colors text-xs",
                    filters.severity.includes(severity) && "bg-primary text-primary-foreground"
                  )}
                  onClick={() =>
                    updateFilters({
                      severity: toggleArrayFilter(filters.severity, severity),
                    })
                  }
                >
                  {severity}
                </Badge>
              ))}
            </div>
          </div>

          {/* Status Filter */}
          <div>
            <Label className="text-sm font-medium mb-2 block">Status</Label>
            <div className="flex flex-wrap gap-1">
              {statusOptions.map((status) => (
                <Badge
                  key={status}
                  variant={filters.status.includes(status) ? "default" : "outline"}
                  className={cn(
                    "cursor-pointer transition-colors text-xs",
                    filters.status.includes(status) && "bg-primary text-primary-foreground"
                  )}
                  onClick={() =>
                    updateFilters({
                      status: toggleArrayFilter(filters.status, status),
                    })
                  }
                >
                  {status}
                </Badge>
              ))}
            </div>
          </div>

          {/* Host Filter */}
          <div>
            <Label className="text-sm font-medium mb-2 block">Host</Label>
            <Select
              onValueChange={(value) =>
                updateFilters({
                  host: value === 'all' ? [] : [value],
                })
              }
            >
              <SelectTrigger>
                <SelectValue placeholder="All hosts" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All hosts</SelectItem>
                {uniqueHosts.map((host) => (
                  <SelectItem key={host} value={host}>
                    {host}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {/* Assignee Filter */}
          <div>
            <Label className="text-sm font-medium mb-2 block">Assigned To</Label>
            <Select
              onValueChange={(value) =>
                updateFilters({
                  assigned_to: value === 'all' ? [] : [value],
                })
              }
            >
              <SelectTrigger>
                <SelectValue placeholder="All assignees" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All assignees</SelectItem>
                {uniqueAssignees.map((assignee) => (
                  <SelectItem key={assignee} value={assignee}>
                    {assignee}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>

        {/* Advanced Filters Toggle */}
        <Button
          variant="ghost"
          size="sm"
          onClick={() => setShowAdvancedFilters(!showAdvancedFilters)}
        >
          {showAdvancedFilters ? 'Hide' : 'Show'} Advanced Filters
        </Button>

        {/* Advanced Filters */}
        {showAdvancedFilters && (
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4 pt-4 border-t">
            {/* Date Range */}
            <div className="space-y-2">
              <Label className="text-sm font-medium">Date Range</Label>
              <div className="flex space-x-2">
                <Popover>
                  <PopoverTrigger asChild>
                    <Button variant="outline" size="sm">
                      <CalendarIcon className="h-4 w-4 mr-2" />
                      {filters.dateRange.start
                        ? format(filters.dateRange.start, 'MMM dd, yyyy')
                        : 'Start date'}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0">
                    <Calendar
                      mode="single"
                      selected={filters.dateRange.start}
                      onSelect={(date) =>
                        updateFilters({
                          dateRange: { ...filters.dateRange, start: date },
                        })
                      }
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
                <Popover>
                  <PopoverTrigger asChild>
                    <Button variant="outline" size="sm">
                      <CalendarIcon className="h-4 w-4 mr-2" />
                      {filters.dateRange.end
                        ? format(filters.dateRange.end, 'MMM dd, yyyy')
                        : 'End date'}
                    </Button>
                  </PopoverTrigger>
                  <PopoverContent className="w-auto p-0">
                    <Calendar
                      mode="single"
                      selected={filters.dateRange.end}
                      onSelect={(date) =>
                        updateFilters({
                          dateRange: { ...filters.dateRange, end: date },
                        })
                      }
                      initialFocus
                    />
                  </PopoverContent>
                </Popover>
              </div>
            </div>
          </div>
        )}

        {/* Clear Filters */}
        {(filters.severity.length > 0 ||
          filters.status.length > 0 ||
          filters.assigned_to.length > 0 ||
          filters.host.length > 0 ||
          filters.dateRange.start ||
          filters.dateRange.end ||
          filters.searchTerm) && (
          <Button variant="outline" size="sm" onClick={clearFilters}>
            <X className="h-4 w-4 mr-2" />
            Clear All Filters
          </Button>
        )}
      </CardContent>
    </Card>
  );
};

export default VulnerabilityFilters;