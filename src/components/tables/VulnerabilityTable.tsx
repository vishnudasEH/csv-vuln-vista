import { useState, useMemo } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
  PaginationEllipsis,
} from '@/components/ui/pagination';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { ChevronUp, ChevronDown, ArrowUpDown } from 'lucide-react';
import { Vulnerability, VulnerabilityStatus } from '@/types/vulnerability';
import SeverityBadge from '@/components/ui/severity-badge';
import StatusBadge from '@/components/ui/status-badge';
import { CommentDialog } from '@/components/ui/comment-dialog';
import { ExportDialog } from '@/components/ui/export-dialog';
import BulkActions from '@/components/ui/bulk-actions';
import { VulnerabilityPreviewDialog } from '@/components/ui/vulnerability-preview-dialog';
import { format, parseISO } from 'date-fns';
import { useToast } from '@/hooks/use-toast';
import { DEFAULT_ASSIGNEES } from '@/constants/assignees';
import { usePagination } from '@/hooks/usePagination';

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
  title?: string;
  onBulkUpdate?: (updates: Array<{name: string, host: string} & Partial<Vulnerability>>) => Promise<void>;
  compact?: boolean;
  pageSize?: number;
}

type SortField = keyof Vulnerability;
type SortDirection = 'asc' | 'desc';

const VulnerabilityTable = ({ vulnerabilities, title, onBulkUpdate, compact = false, pageSize = 100 }: VulnerabilityTableProps) => {
  const { toast } = useToast();
  const [sortField, setSortField] = useState<SortField>('severity');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');
  const [selectedItems, setSelectedItems] = useState<Set<number>>(new Set());

  const getSeverityWeight = (severity: string): number => {
    const weights = { 'Critical': 5, 'High': 4, 'Medium': 3, 'Low': 2, 'Info': 1 };
    return weights[severity as keyof typeof weights] || 0;
  };

  // Sort vulnerabilities first, then paginate
  const sortedVulnerabilities = useMemo(() => {
    return [...vulnerabilities].sort((a, b) => {
      let aValue: any = a[sortField];
      let bValue: any = b[sortField];

      // Special handling for severity sorting
      if (sortField === 'severity') {
        aValue = getSeverityWeight(aValue);
        bValue = getSeverityWeight(bValue);
      }

      // Special handling for date sorting
      if (sortField === 'timestamp') {
        aValue = new Date(aValue).getTime();
        bValue = new Date(bValue).getTime();
      }

      // Special handling for numeric fields
      if (sortField === 'days_overdue') {
        aValue = Number(aValue) || 0;
        bValue = Number(bValue) || 0;
      }

      if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
      if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
      return 0;
    });
  }, [vulnerabilities, sortField, sortDirection]);

  // Use pagination hook
  const {
    paginatedData: paginatedVulnerabilities,
    currentPage,
    totalPages,
    totalItems,
    startIndex,
    endIndex,
    goToPage,
    goToNextPage,
    goToPrevPage,
    hasNextPage,
    hasPrevPage
  } = usePagination(sortedVulnerabilities, { pageSize });

  const handleSort = (field: SortField) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  };

  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      // Select all items on current page
      const currentPageIndices = Array.from({ length: paginatedVulnerabilities.length }, (_, i) => startIndex + i);
      setSelectedItems(new Set([...selectedItems, ...currentPageIndices]));
    } else {
      // Deselect all items on current page
      const currentPageIndices = new Set(Array.from({ length: paginatedVulnerabilities.length }, (_, i) => startIndex + i));
      setSelectedItems(new Set([...selectedItems].filter(index => !currentPageIndices.has(index))));
    }
  };

  const handleSelectItem = (index: number, checked: boolean) => {
    const newSelected = new Set(selectedItems);
    if (checked) {
      newSelected.add(index);
    } else {
      newSelected.delete(index);
    }
    setSelectedItems(newSelected);
  };

  const handleBulkUpdate = async (updates: Array<{name: string, host: string} & Partial<Vulnerability>>) => {
    if (onBulkUpdate) {
      await onBulkUpdate(updates);
      setSelectedItems(new Set());
    }
  };

  const availableAssignees = DEFAULT_ASSIGNEES;

  const handleInlineUpdate = async (vulnerability: Vulnerability, field: 'status' | 'assigned_to', value: string) => {
    if (onBulkUpdate) {
      const updates: Partial<Vulnerability> = {};
      if (field === 'status') {
        updates.status = value as VulnerabilityStatus;
      } else {
        updates.assigned_to = value === 'unassigned' ? '' : value;
      }
      
      try {
        await onBulkUpdate([{ name: vulnerability.name, host: vulnerability.host, ...updates }]);
        toast({
          title: "Success",
          description: `${field === 'status' ? 'Status' : 'Assignee'} updated successfully.`,
        });
      } catch (error) {
        toast({
          title: "Update Failed",
          description: `Failed to update ${field}. Please try again.`,
          variant: "destructive",
        });
      }
    }
  };

  const getSortIcon = (field: SortField) => {
    if (sortField !== field) {
      return <ArrowUpDown className="h-4 w-4" />;
    }
    return sortDirection === 'asc' ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />;
  };

  const selectedVulnerabilities = useMemo(() => {
    return Array.from(selectedItems).map(index => sortedVulnerabilities[index]);
  }, [selectedItems, sortedVulnerabilities]);

  const formatDate = (dateString: string) => {
    try {
      return format(parseISO(dateString), 'MMM dd, yyyy');
    } catch {
      return dateString;
    }
  };

  const renderPaginationItems = () => {
    const items = [];
    const maxVisiblePages = 5;
    
    if (totalPages <= maxVisiblePages) {
      // Show all pages if total is small
      for (let i = 1; i <= totalPages; i++) {
        items.push(
          <PaginationItem key={i}>
            <PaginationLink
              isActive={currentPage === i}
              onClick={() => goToPage(i)}
              style={{ cursor: 'pointer' }}
            >
              {i}
            </PaginationLink>
          </PaginationItem>
        );
      }
    } else {
      // Show first page
      items.push(
        <PaginationItem key={1}>
          <PaginationLink
            isActive={currentPage === 1}
            onClick={() => goToPage(1)}
            style={{ cursor: 'pointer' }}
          >
            1
          </PaginationLink>
        </PaginationItem>
      );

      // Show ellipsis if needed
      if (currentPage > 3) {
        items.push(
          <PaginationItem key="ellipsis1">
            <PaginationEllipsis />
          </PaginationItem>
        );
      }

      // Show current page and neighbors
      const start = Math.max(2, currentPage - 1);
      const end = Math.min(totalPages - 1, currentPage + 1);
      
      for (let i = start; i <= end; i++) {
        items.push(
          <PaginationItem key={i}>
            <PaginationLink
              isActive={currentPage === i}
              onClick={() => goToPage(i)}
              style={{ cursor: 'pointer' }}
            >
              {i}
            </PaginationLink>
          </PaginationItem>
        );
      }

      // Show ellipsis if needed
      if (currentPage < totalPages - 2) {
        items.push(
          <PaginationItem key="ellipsis2">
            <PaginationEllipsis />
          </PaginationItem>
        );
      }

      // Show last page
      if (totalPages > 1) {
        items.push(
          <PaginationItem key={totalPages}>
            <PaginationLink
              isActive={currentPage === totalPages}
              onClick={() => goToPage(totalPages)}
              style={{ cursor: 'pointer' }}
            >
              {totalPages}
            </PaginationLink>
          </PaginationItem>
        );
      }
    }

    return items;
  };

  const SortableHeader = ({ field, children }: { field: SortField; children: React.ReactNode }) => (
    <TableHead>
      <Button
        variant="ghost"
        size="sm"
        className="h-auto p-0 font-medium text-left hover:bg-transparent"
        onClick={() => handleSort(field)}
      >
        <div className="flex items-center space-x-1">
          <span>{children}</span>
          {getSortIcon(field)}
        </div>
      </Button>
    </TableHead>
  );

  return (
    <Card>
      {title && (
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <CardTitle>{title}</CardTitle>
            <ExportDialog vulnerabilities={vulnerabilities} title={title} />
          </div>
        </CardHeader>
      )}
      <CardContent className="p-0">
        <BulkActions
          selectedCount={selectedItems.size}
          selectedVulnerabilities={selectedVulnerabilities}
          onClearSelection={() => setSelectedItems(new Set())}
          onBulkUpdate={handleBulkUpdate}
          availableAssignees={availableAssignees}
        />
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow className="hover:bg-transparent">
                <TableHead className="w-12">
                  <Checkbox
                    checked={paginatedVulnerabilities.every((_, i) => selectedItems.has(startIndex + i)) && paginatedVulnerabilities.length > 0}
                    onCheckedChange={handleSelectAll}
                    aria-label="Select all vulnerabilities on current page"
                  />
                </TableHead>
                <SortableHeader field="name">Vulnerability</SortableHeader>
                <SortableHeader field="host">Host</SortableHeader>
                <SortableHeader field="port">Port</SortableHeader>
                <SortableHeader field="severity">Severity</SortableHeader>
                <SortableHeader field="status">Status</SortableHeader>
                <SortableHeader field="assigned_to">Assigned To</SortableHeader>
                <SortableHeader field="timestamp">Date</SortableHeader>
                <SortableHeader field="days_overdue">Days Overdue</SortableHeader>
                <TableHead className="w-12">Notes</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {paginatedVulnerabilities.map((vuln, pageIndex) => {
                const originalIndex = startIndex + pageIndex;
                return (
                  <TableRow key={originalIndex} className="hover:bg-muted/50">
                    <TableCell>
                      <Checkbox
                        checked={selectedItems.has(originalIndex)}
                        onCheckedChange={(checked) => handleSelectItem(originalIndex, checked as boolean)}
                        aria-label={`Select ${vuln.name}`}
                      />
                    </TableCell>
                    <TableCell>
                      <VulnerabilityPreviewDialog
                        vulnerability={vuln}
                        availableAssignees={availableAssignees}
                        onUpdate={handleBulkUpdate}
                      >
                        <button className="text-left w-full hover:bg-muted/50 p-1 rounded transition-colors">
                          <div className="space-y-1">
                            <div className="font-medium">{vuln.name}</div>
                            {vuln.description && (
                              <div className="text-sm text-muted-foreground max-w-xs truncate">
                                {vuln.description}
                              </div>
                            )}
                          </div>
                        </button>
                      </VulnerabilityPreviewDialog>
                    </TableCell>
                    <TableCell className="font-mono text-sm">{vuln.host}</TableCell>
                    <TableCell className="font-mono text-sm">{vuln.port}</TableCell>
                    <TableCell>
                      <SeverityBadge severity={vuln.severity} />
                    </TableCell>
                    <TableCell>
                      {compact ? (
                        <StatusBadge status={vuln.status} />
                      ) : (
                        <Select
                          value={vuln.status}
                          onValueChange={(value) => handleInlineUpdate(vuln, 'status', value)}
                        >
                          <SelectTrigger className="w-32 h-8">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="open">Open</SelectItem>
                            <SelectItem value="Fixed">Fixed</SelectItem>
                            <SelectItem value="Triaged">Triaged</SelectItem>
                            <SelectItem value="False Positive">False Positive</SelectItem>
                          </SelectContent>
                        </Select>
                      )}
                    </TableCell>
                    <TableCell>
                      {compact ? (
                        vuln.assigned_to ? (
                          <Badge variant="secondary">{vuln.assigned_to}</Badge>
                        ) : (
                          <span className="text-muted-foreground">Unassigned</span>
                        )
                      ) : (
                        <Select
                          value={vuln.assigned_to || 'unassigned'}
                          onValueChange={(value) => handleInlineUpdate(vuln, 'assigned_to', value)}
                        >
                          <SelectTrigger className="w-32 h-8">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="unassigned">Unassigned</SelectItem>
                            {availableAssignees.map((assignee) => (
                              <SelectItem key={assignee} value={assignee}>
                                {assignee}
                              </SelectItem>
                            ))}
                          </SelectContent>
                        </Select>
                      )}
                    </TableCell>
                    <TableCell className="text-sm">{formatDate(vuln.timestamp)}</TableCell>
                    <TableCell>
                      {vuln.days_overdue > 0 ? (
                        <Badge variant="destructive">{vuln.days_overdue} days</Badge>
                      ) : (
                        <span className="text-muted-foreground">-</span>
                      )}
                    </TableCell>
                    <TableCell>
                      <CommentDialog vulnerability={vuln} />
                    </TableCell>
                  </TableRow>
                );
              })}
            </TableBody>
          </Table>
        </div>
        
        {/* Pagination Controls */}
        {totalPages > 1 && (
          <div className="flex items-center justify-between px-6 py-4 border-t">
            <div className="text-sm text-muted-foreground">
              Showing {startIndex + 1} to {Math.min(endIndex, totalItems)} of {totalItems} vulnerabilities
            </div>
            <Pagination>
              <PaginationContent>
                <PaginationItem>
                  <PaginationPrevious
                    onClick={goToPrevPage}
                    style={{ cursor: !hasPrevPage ? 'not-allowed' : 'pointer', opacity: !hasPrevPage ? 0.5 : 1 }}
                  />
                </PaginationItem>
                {renderPaginationItems()}
                <PaginationItem>
                  <PaginationNext
                    onClick={goToNextPage}
                    style={{ cursor: !hasNextPage ? 'not-allowed' : 'pointer', opacity: !hasNextPage ? 0.5 : 1 }}
                  />
                </PaginationItem>
              </PaginationContent>
            </Pagination>
          </div>
        )}
        
        {sortedVulnerabilities.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            No vulnerabilities match the current filters.
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default VulnerabilityTable;