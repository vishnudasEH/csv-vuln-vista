import { useState } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { ChevronUp, ChevronDown, ArrowUpDown } from 'lucide-react';
import { Vulnerability } from '@/types/vulnerability';
import SeverityBadge from '@/components/ui/severity-badge';
import StatusBadge from '@/components/ui/status-badge';
import { format, parseISO } from 'date-fns';

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
}

type SortField = keyof Vulnerability;
type SortDirection = 'asc' | 'desc';

const VulnerabilityTable = ({ vulnerabilities }: VulnerabilityTableProps) => {
  const [sortField, setSortField] = useState<SortField>('severity');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');

  const handleSort = (field: SortField) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  };

  const getSortIcon = (field: SortField) => {
    if (sortField !== field) {
      return <ArrowUpDown className="h-4 w-4" />;
    }
    return sortDirection === 'asc' ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />;
  };

  const getSeverityWeight = (severity: string): number => {
    const weights = { 'Critical': 5, 'High': 4, 'Medium': 3, 'Low': 2, 'Info': 1 };
    return weights[severity as keyof typeof weights] || 0;
  };

  const sortedVulnerabilities = [...vulnerabilities].sort((a, b) => {
    let aValue: any = a[sortField];
    let bValue: any = b[sortField];

    // Special handling for severity sorting
    if (sortField === 'severity') {
      aValue = getSeverityWeight(aValue);
      bValue = getSeverityWeight(bValue);
    }

    // Special handling for date sorting
    if (sortField === 'timestamp') {
      aValue = new Date(aValue).getTime();
      bValue = new Date(bValue).getTime();
    }

    // Special handling for numeric fields
    if (sortField === 'days_overdue') {
      aValue = Number(aValue) || 0;
      bValue = Number(bValue) || 0;
    }

    if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
    if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
    return 0;
  });

  const formatDate = (dateString: string) => {
    try {
      return format(parseISO(dateString), 'MMM dd, yyyy');
    } catch {
      return dateString;
    }
  };

  const SortableHeader = ({ field, children }: { field: SortField; children: React.ReactNode }) => (
    <TableHead>
      <Button
        variant="ghost"
        size="sm"
        className="h-auto p-0 font-medium text-left hover:bg-transparent"
        onClick={() => handleSort(field)}
      >
        <div className="flex items-center space-x-1">
          <span>{children}</span>
          {getSortIcon(field)}
        </div>
      </Button>
    </TableHead>
  );

  return (
    <Card>
      <CardContent className="p-0">
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow className="hover:bg-transparent">
                <SortableHeader field="name">Vulnerability</SortableHeader>
                <SortableHeader field="host">Host</SortableHeader>
                <SortableHeader field="port">Port</SortableHeader>
                <SortableHeader field="severity">Severity</SortableHeader>
                <SortableHeader field="status">Status</SortableHeader>
                <SortableHeader field="assigned_to">Assigned To</SortableHeader>
                <SortableHeader field="timestamp">Date</SortableHeader>
                <SortableHeader field="days_overdue">Days Overdue</SortableHeader>
              </TableRow>
            </TableHeader>
            <TableBody>
              {sortedVulnerabilities.map((vuln, index) => (
                <TableRow key={index} className="hover:bg-muted/50">
                  <TableCell>
                    <div className="space-y-1">
                      <div className="font-medium">{vuln.name}</div>
                      {vuln.description && (
                        <div className="text-sm text-muted-foreground max-w-xs truncate">
                          {vuln.description}
                        </div>
                      )}
                    </div>
                  </TableCell>
                  <TableCell className="font-mono text-sm">{vuln.host}</TableCell>
                  <TableCell className="font-mono text-sm">{vuln.port}</TableCell>
                  <TableCell>
                    <SeverityBadge severity={vuln.severity} />
                  </TableCell>
                  <TableCell>
                    <StatusBadge status={vuln.status} />
                  </TableCell>
                  <TableCell>
                    {vuln.assigned_to ? (
                      <Badge variant="secondary">{vuln.assigned_to}</Badge>
                    ) : (
                      <span className="text-muted-foreground">Unassigned</span>
                    )}
                  </TableCell>
                  <TableCell className="text-sm">{formatDate(vuln.timestamp)}</TableCell>
                  <TableCell>
                    {vuln.days_overdue > 0 ? (
                      <Badge variant="destructive">{vuln.days_overdue} days</Badge>
                    ) : (
                      <span className="text-muted-foreground">-</span>
                    )}
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
        {sortedVulnerabilities.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            No vulnerabilities match the current filters.
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default VulnerabilityTable;