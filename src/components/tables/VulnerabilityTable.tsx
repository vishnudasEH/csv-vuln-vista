import { useState, useMemo } from 'react';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from '@/components/ui/table';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Checkbox } from '@/components/ui/checkbox';
import { ChevronUp, ChevronDown, ArrowUpDown } from 'lucide-react';
import { Vulnerability, VulnerabilityStatus } from '@/types/vulnerability';
import SeverityBadge from '@/components/ui/severity-badge';
import StatusBadge from '@/components/ui/status-badge';
import { CommentDialog } from '@/components/ui/comment-dialog';
import { ExportDialog } from '@/components/ui/export-dialog';
import BulkActions from '@/components/ui/bulk-actions';
import { format, parseISO } from 'date-fns';
import { useToast } from '@/hooks/use-toast';

interface VulnerabilityTableProps {
  vulnerabilities: Vulnerability[];
  title?: string;
  onBulkUpdate?: (selectedIds: string[], updates: Partial<Vulnerability>) => void;
}

type SortField = keyof Vulnerability;
type SortDirection = 'asc' | 'desc';

const VulnerabilityTable = ({ vulnerabilities, title, onBulkUpdate }: VulnerabilityTableProps) => {
  const { toast } = useToast();
  const [sortField, setSortField] = useState<SortField>('severity');
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc');
  const [selectedItems, setSelectedItems] = useState<Set<number>>(new Set());

  const handleSort = (field: SortField) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');
    } else {
      setSortField(field);
      setSortDirection('asc');
    }
  };

  const handleSelectAll = (checked: boolean) => {
    if (checked) {
      setSelectedItems(new Set(sortedVulnerabilities.map((_, index) => index)));
    } else {
      setSelectedItems(new Set());
    }
  };

  const handleSelectItem = (index: number, checked: boolean) => {
    const newSelected = new Set(selectedItems);
    if (checked) {
      newSelected.add(index);
    } else {
      newSelected.delete(index);
    }
    setSelectedItems(newSelected);
  };

  const handleBulkStatusChange = (status: VulnerabilityStatus) => {
    if (onBulkUpdate && selectedItems.size > 0) {
      const selectedIndices = Array.from(selectedItems);
      const selectedIds = selectedIndices.map(i => sortedVulnerabilities[i].name); // Using name as ID
      onBulkUpdate(selectedIds, { status });
      setSelectedItems(new Set());
      toast({
        title: "Status Updated",
        description: `${selectedItems.size} vulnerabilities updated to ${status}`,
      });
    }
  };

  const handleBulkAssigneeChange = (assignee: string) => {
    if (onBulkUpdate && selectedItems.size > 0) {
      const selectedIndices = Array.from(selectedItems);
      const selectedIds = selectedIndices.map(i => sortedVulnerabilities[i].name);
      onBulkUpdate(selectedIds, { assigned_to: assignee });
      setSelectedItems(new Set());
      toast({
        title: "Assignee Updated",
        description: `${selectedItems.size} vulnerabilities assigned to ${assignee || 'Unassigned'}`,
      });
    }
  };

  const availableAssignees = useMemo(() => {
    const assignees = new Set<string>();
    vulnerabilities.forEach(v => {
      if (v.assigned_to) assignees.add(v.assigned_to);
    });
    return Array.from(assignees).sort();
  }, [vulnerabilities]);

  const getSortIcon = (field: SortField) => {
    if (sortField !== field) {
      return <ArrowUpDown className="h-4 w-4" />;
    }
    return sortDirection === 'asc' ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />;
  };

  const getSeverityWeight = (severity: string): number => {
    const weights = { 'Critical': 5, 'High': 4, 'Medium': 3, 'Low': 2, 'Info': 1 };
    return weights[severity as keyof typeof weights] || 0;
  };

  const sortedVulnerabilities = [...vulnerabilities].sort((a, b) => {
    let aValue: any = a[sortField];
    let bValue: any = b[sortField];

    // Special handling for severity sorting
    if (sortField === 'severity') {
      aValue = getSeverityWeight(aValue);
      bValue = getSeverityWeight(bValue);
    }

    // Special handling for date sorting
    if (sortField === 'timestamp') {
      aValue = new Date(aValue).getTime();
      bValue = new Date(bValue).getTime();
    }

    // Special handling for numeric fields
    if (sortField === 'days_overdue') {
      aValue = Number(aValue) || 0;
      bValue = Number(bValue) || 0;
    }

    if (aValue < bValue) return sortDirection === 'asc' ? -1 : 1;
    if (aValue > bValue) return sortDirection === 'asc' ? 1 : -1;
    return 0;
  });

  const formatDate = (dateString: string) => {
    try {
      return format(parseISO(dateString), 'MMM dd, yyyy');
    } catch {
      return dateString;
    }
  };

  const SortableHeader = ({ field, children }: { field: SortField; children: React.ReactNode }) => (
    <TableHead>
      <Button
        variant="ghost"
        size="sm"
        className="h-auto p-0 font-medium text-left hover:bg-transparent"
        onClick={() => handleSort(field)}
      >
        <div className="flex items-center space-x-1">
          <span>{children}</span>
          {getSortIcon(field)}
        </div>
      </Button>
    </TableHead>
  );

  return (
    <Card>
      {title && (
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <CardTitle>{title}</CardTitle>
            <ExportDialog vulnerabilities={vulnerabilities} title={title} />
          </div>
        </CardHeader>
      )}
      <CardContent className="p-0">
        <BulkActions
          selectedCount={selectedItems.size}
          onClearSelection={() => setSelectedItems(new Set())}
          onStatusChange={handleBulkStatusChange}
          onAssigneeChange={handleBulkAssigneeChange}
          availableAssignees={availableAssignees}
        />
        <div className="overflow-x-auto">
          <Table>
            <TableHeader>
              <TableRow className="hover:bg-transparent">
                <TableHead className="w-12">
                  <Checkbox
                    checked={selectedItems.size === sortedVulnerabilities.length && sortedVulnerabilities.length > 0}
                    onCheckedChange={handleSelectAll}
                    aria-label="Select all vulnerabilities"
                  />
                </TableHead>
                <SortableHeader field="name">Vulnerability</SortableHeader>
                <SortableHeader field="host">Host</SortableHeader>
                <SortableHeader field="port">Port</SortableHeader>
                <SortableHeader field="severity">Severity</SortableHeader>
                <SortableHeader field="status">Status</SortableHeader>
                <SortableHeader field="assigned_to">Assigned To</SortableHeader>
                <SortableHeader field="timestamp">Date</SortableHeader>
                <SortableHeader field="days_overdue">Days Overdue</SortableHeader>
                <TableHead className="w-12">Notes</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {sortedVulnerabilities.map((vuln, index) => (
                <TableRow key={index} className="hover:bg-muted/50">
                  <TableCell>
                    <Checkbox
                      checked={selectedItems.has(index)}
                      onCheckedChange={(checked) => handleSelectItem(index, checked as boolean)}
                      aria-label={`Select ${vuln.name}`}
                    />
                  </TableCell>
                  <TableCell>
                    <div className="space-y-1">
                      <div className="font-medium">{vuln.name}</div>
                      {vuln.description && (
                        <div className="text-sm text-muted-foreground max-w-xs truncate">
                          {vuln.description}
                        </div>
                      )}
                    </div>
                  </TableCell>
                  <TableCell className="font-mono text-sm">{vuln.host}</TableCell>
                  <TableCell className="font-mono text-sm">{vuln.port}</TableCell>
                  <TableCell>
                    <SeverityBadge severity={vuln.severity} />
                  </TableCell>
                  <TableCell>
                    <StatusBadge status={vuln.status} />
                  </TableCell>
                  <TableCell>
                    {vuln.assigned_to ? (
                      <Badge variant="secondary">{vuln.assigned_to}</Badge>
                    ) : (
                      <span className="text-muted-foreground">Unassigned</span>
                    )}
                  </TableCell>
                  <TableCell className="text-sm">{formatDate(vuln.timestamp)}</TableCell>
                  <TableCell>
                    {vuln.days_overdue > 0 ? (
                      <Badge variant="destructive">{vuln.days_overdue} days</Badge>
                    ) : (
                      <span className="text-muted-foreground">-</span>
                    )}
                  </TableCell>
                  <TableCell>
                    <CommentDialog vulnerability={vuln} />
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
        {sortedVulnerabilities.length === 0 && (
          <div className="text-center py-8 text-muted-foreground">
            No vulnerabilities match the current filters.
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default VulnerabilityTable;